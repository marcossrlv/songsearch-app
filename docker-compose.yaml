services:
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - '3000:3000'
    stdin_open: true
    tty: true

  api:
    build:
      context: .
      dockerfile: backend/api/Dockerfile
    container_name: api
    depends_on:
      - neo4j
      - db
    ports:
      - '5001:5000'

  db:
    image: postgres:15
    container_name: playlist-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: playlistdb
    ports:
      - "5432:5432"
    volumes:
      - ./kafka/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      retries: 5
      start_period: 20s

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    environment:
      NEO4J_AUTH: none
    ports:
      - "7474:7474"
      - "7687:7687"

  consumer:
    container_name: kafka-consumer
    build:
      context: .
      dockerfile: backend/kafka/consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_started
    command: ["python", "consumer.py"]

  producer-cron:
    build:
      context: .
      dockerfile: backend/kafka/producer/Dockerfile
    container_name: kafka-prod-cron
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_started
    command: ["cron", "-f"]